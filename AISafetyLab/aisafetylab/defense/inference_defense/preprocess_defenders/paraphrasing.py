from loguru import logger
from fastchat.conversation import get_conv_template
from openai import OpenAI
import time
from aisafetylab.defense.inference_defense.base_defender import PreprocessDefender

class ParaphraseDefender(PreprocessDefender):
    """
    Paraphrasing-based defender using OpenAI ChatGPT models.
    """

    def __init__(self, model_name, base_url, api_key, temperature=0.7, max_length=100):
        """
        Initialize the paraphrasing defender.

        Args:
            model_name (str): The ChatGPT model name (e.g., "gpt-3.5-turbo").
            base_url (str): Base URL for the OpenAI API.
            api_key (str): API key for OpenAI.
            temperature (float): Sampling temperature for generation.
            max_length (int): Maximum token length for paraphrased outputs.
        """
        self.model_name = model_name
        self.client = OpenAI(base_url=base_url, api_key=api_key)
        self.conversation = get_conv_template('chatgpt')
        self.temperature = temperature
        self.max_length = max_length

    def generate(self, message, **kwargs):
        """
        Generate a paraphrased response from the ChatGPT model.

        Args:
            message (str): The input message as a single string.
            kwargs: Additional keyword arguments for the OpenAI API.

        Returns:
            str: The response generated by the OpenAI model.
        """
        self.conversation.messages = []

        self.conversation.set_system_message("You are a helpful assistant.")
        self.conversation.append_message(self.conversation.roles[0], message)

        max_retries = 5
        for attempt in range(max_retries):
            try:
                response = self.client.chat.completions.create(
                    model=self.model_name,
                    messages=self.conversation.to_openai_api_messages(),
                    temperature=self.temperature,
                    max_tokens=self.max_length,
                    **kwargs
                )
                return response.choices[0].message.content.strip()
            except Exception as e:
                logger.error(f"Attempt {attempt + 1} failed: {e}")
                if attempt == max_retries - 1:
                    logger.error("Max retries reached. Raising error.")
                    raise e
                # Wait a short amount of time before retrying
                time.sleep(2)  # You can adjust the sleep time as necessary (e.g., 2 seconds)

    def paraphrase(self, text: str) -> str:
        """
        Paraphrase the input text using the ChatGPT model.

        Args:
            text (str): The input text to be paraphrased.

        Returns:
            str: The paraphrased text.
        """
        prompt = f"Paraphrase the following sentences:\n{text}"
        return self.generate(prompt)

    def defend(self, messages):
        """
        Defend by paraphrasing the input text.

        Args:
            message (str): The original input message.

        Returns:
            str: The paraphrased message.
        """
        if isinstance(messages, str):
            messages = [{"role": "user", "content": messages}]
        paraphrase_text = self.paraphrase(messages[-1]["content"])
        logger.info(f"Paraphrased text: {paraphrase_text}")
        messages[-1]["content"] = paraphrase_text
        return messages, False